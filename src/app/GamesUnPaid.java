/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app;

import dao.GameDao;
import dao.MatchDao;
import java.awt.Color;
import java.awt.Font;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import model.Game;
import model.GameTableModel;
import model.Match;

/**
 *
 * @author stim
 */
public class GamesUnPaid extends javax.swing.JPanel {

    private static int currentBoard;
    private static HashSet<Integer> payListA = new HashSet<>();
    private static HashSet<Integer> payListB = new HashSet<>();
    private static HashSet<Integer> payListC = new HashSet<>();
    private static HashSet<Integer> payListD = new HashSet<>();

    private static ArrayList<Game> gameListA;
    private static ArrayList<Game> gameListB;
    private static ArrayList<Game> gameListC;
    private static ArrayList<Game> gameListD;

  
    /**
     * Creates new form GamePayment
     */
    public GamesUnPaid() {

        prepareComponents();
        initComponents();
        jTable1.setRowSelectionAllowed(true);
        Font font = new Font("sans-serif", Font.LAYOUT_LEFT_TO_RIGHT, 14);
        jTable1.setFont(font);
        jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);

    }

    private void prepareComponents() {
       
        gameListA = new GameDao().getAllUnpaidGames("BOARD-A");
        if (payListA.size() > 0) {
            payListA.clear();
        }
        gameListB = new GameDao().getAllUnpaidGames("BOARD-B");
        if (payListB.size() > 0) {
            payListB.clear();
        }
        gameListC = new GameDao().getAllUnpaidGames("BOARD-C");
        if (payListC.size() > 0) {
            payListC.clear();
        }
        gameListD = new GameDao().getAllUnpaidGames("BOARD-D");
        if (payListD.size() > 0) {
            payListD.clear();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPaneBoard = new javax.swing.JTabbedPane();
        tabBoardA = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblGames = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblAmount = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        paidBy = new javax.swing.JTextField();
        paidRemark = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        payAmount = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        lblTime = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        payDiscount = new javax.swing.JTextField();
        lblPayStatus = new javax.swing.JLabel();
        tabBoardB = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        lblGames1 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        lblAmount1 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        paidBy1 = new javax.swing.JTextField();
        paidRemark1 = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jLabel31 = new javax.swing.JLabel();
        payAmount1 = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        lblTime1 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        payDiscount1 = new javax.swing.JTextField();
        lblPayStatus1 = new javax.swing.JLabel();
        tabBoardC = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        lblGames2 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        lblAmount2 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        paidBy2 = new javax.swing.JTextField();
        paidRemark2 = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jLabel37 = new javax.swing.JLabel();
        payAmount2 = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        lblTime2 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        payDiscount2 = new javax.swing.JTextField();
        lblPayStatus2 = new javax.swing.JLabel();
        tabBoardD = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        lblGames3 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        lblAmount3 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        paidBy3 = new javax.swing.JTextField();
        paidRemark3 = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jLabel43 = new javax.swing.JLabel();
        payAmount3 = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        lblTime3 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        payDiscount3 = new javax.swing.JTextField();
        lblPayStatus3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        tabbedPaneBoard.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbedPaneBoardStateChanged(evt);
            }
        });
        tabbedPaneBoard.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                tabbedPaneBoardComponentShown(evt);
            }
        });
        tabbedPaneBoard.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tabbedPaneBoardPropertyChange(evt);
            }
        });

        jTable1.setModel(new GameTableModel(gameListA));
        jTable1.setCellSelectionEnabled(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));

        jLabel1.setText("Total Games:");

        lblGames.setText(".......");

        jLabel3.setText("Total Amount:");

        lblAmount.setText(".........");

        jLabel5.setText("Payer");

        jLabel6.setText("Remark");

        jButton1.setText("Pay Amount");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Refresh");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel25.setText("Pay Amount:");

        jLabel26.setText("Total Time:");

        lblTime.setText("..........");

        jLabel27.setText("Discount");

        lblPayStatus.setText("Status: ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel25)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(payAmount))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblGames, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(paidBy)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lblAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(jLabel26)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblTime, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel27)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblPayStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(paidRemark)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(payDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGames, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3)
                    .addComponent(lblAmount)
                    .addComponent(jLabel26)
                    .addComponent(lblTime))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(payDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25)
                    .addComponent(payAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(paidBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(paidRemark, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(lblPayStatus)))
        );

        javax.swing.GroupLayout tabBoardALayout = new javax.swing.GroupLayout(tabBoardA);
        tabBoardA.setLayout(tabBoardALayout);
        tabBoardALayout.setHorizontalGroup(
            tabBoardALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabBoardALayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabBoardALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        tabBoardALayout.setVerticalGroup(
            tabBoardALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabBoardALayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2))
        );

        tabbedPaneBoard.addTab("BOARD-A", tabBoardA);

        jTable2.setModel(new GameTableModel(gameListB));
        jTable2.setCellSelectionEnabled(true);
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jTable2);

        jPanel5.setBackground(new java.awt.Color(255, 255, 204));

        jLabel4.setText("Total Games:");

        lblGames1.setText(".......");

        jLabel28.setText("Total Amount:");

        lblAmount1.setText(".........");

        jLabel29.setText("Payer");

        jLabel30.setText("Remark");

        jButton9.setText("Pay Amount");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("Refresh");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jLabel31.setText("Pay Amount:");

        jLabel32.setText("Total Time:");

        lblTime1.setText("..........");

        jLabel33.setText("Discount");

        lblPayStatus1.setText("Status: ");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jButton9)
                        .addGap(18, 18, 18)
                        .addComponent(jButton10)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel31)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(payAmount1))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblGames1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel28))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel29)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(paidBy1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(lblAmount1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(jLabel32)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblTime1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel33)
                                    .addComponent(jLabel30))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblPayStatus1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(paidRemark1)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addComponent(payDiscount1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))))))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGames1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel28)
                    .addComponent(lblAmount1)
                    .addComponent(jLabel32)
                    .addComponent(lblTime1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(payDiscount1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel31)
                    .addComponent(payAmount1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(paidBy1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel30)
                    .addComponent(paidRemark1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton9)
                    .addComponent(jButton10)
                    .addComponent(lblPayStatus1)))
        );

        javax.swing.GroupLayout tabBoardBLayout = new javax.swing.GroupLayout(tabBoardB);
        tabBoardB.setLayout(tabBoardBLayout);
        tabBoardBLayout.setHorizontalGroup(
            tabBoardBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabBoardBLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabBoardBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        tabBoardBLayout.setVerticalGroup(
            tabBoardBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabBoardBLayout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2))
        );

        tabbedPaneBoard.addTab("BOARD-B", tabBoardB);

        jTable3.setModel(new GameTableModel(gameListC));
        jTable3.setCellSelectionEnabled(true);
        jTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable3MouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(jTable3);

        jPanel6.setBackground(new java.awt.Color(255, 255, 204));

        jLabel7.setText("Total Games:");

        lblGames2.setText(".......");

        jLabel34.setText("Total Amount:");

        lblAmount2.setText(".........");

        jLabel35.setText("Payer");

        jLabel36.setText("Remark");

        jButton11.setText("Pay Amount");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setText("Refresh");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jLabel37.setText("Pay Amount:");

        jLabel38.setText("Total Time:");

        lblTime2.setText("..........");

        jLabel39.setText("Discount");

        lblPayStatus2.setText("Status: ");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jButton11)
                        .addGap(18, 18, 18)
                        .addComponent(jButton12)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel37)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(payAmount2))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblGames2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel34))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel35)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(paidBy2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(lblAmount2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(jLabel38)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblTime2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel39)
                                    .addComponent(jLabel36))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblPayStatus2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(paidRemark2)
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addComponent(payDiscount2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))))))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGames2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel34)
                    .addComponent(lblAmount2)
                    .addComponent(jLabel38)
                    .addComponent(lblTime2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel39)
                    .addComponent(payDiscount2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel37)
                    .addComponent(payAmount2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel35)
                    .addComponent(paidBy2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel36)
                    .addComponent(paidRemark2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton11)
                    .addComponent(jButton12)
                    .addComponent(lblPayStatus2)))
        );

        javax.swing.GroupLayout tabBoardCLayout = new javax.swing.GroupLayout(tabBoardC);
        tabBoardC.setLayout(tabBoardCLayout);
        tabBoardCLayout.setHorizontalGroup(
            tabBoardCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabBoardCLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabBoardCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        tabBoardCLayout.setVerticalGroup(
            tabBoardCLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabBoardCLayout.createSequentialGroup()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2))
        );

        tabbedPaneBoard.addTab("BOARD-C", tabBoardC);

        jTable4.setModel(new GameTableModel(gameListD));
        jTable4.setCellSelectionEnabled(true);
        jTable4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable4MouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(jTable4);

        jPanel7.setBackground(new java.awt.Color(255, 255, 204));

        jLabel8.setText("Total Games:");

        lblGames3.setText(".......");

        jLabel40.setText("Total Amount:");

        lblAmount3.setText(".........");

        jLabel41.setText("Payer");

        jLabel42.setText("Remark");

        jButton13.setText("Pay Amount");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton14.setText("Refresh");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jLabel43.setText("Pay Amount:");

        jLabel44.setText("Total Time:");

        lblTime3.setText("..........");

        jLabel45.setText("Discount");

        lblPayStatus3.setText("Status: ");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jButton13)
                        .addGap(18, 18, 18)
                        .addComponent(jButton14)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel43)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(payAmount3))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblGames3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel40))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel41)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(paidBy3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(lblAmount3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(jLabel44)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblTime3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel45)
                                    .addComponent(jLabel42))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblPayStatus3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(paidRemark3)
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addComponent(payDiscount3, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))))))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGames3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel40)
                    .addComponent(lblAmount3)
                    .addComponent(jLabel44)
                    .addComponent(lblTime3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel45)
                    .addComponent(payDiscount3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel43)
                    .addComponent(payAmount3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel41)
                    .addComponent(paidBy3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel42)
                    .addComponent(paidRemark3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton13)
                    .addComponent(jButton14)
                    .addComponent(lblPayStatus3)))
        );

        javax.swing.GroupLayout tabBoardDLayout = new javax.swing.GroupLayout(tabBoardD);
        tabBoardD.setLayout(tabBoardDLayout);
        tabBoardDLayout.setHorizontalGroup(
            tabBoardDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabBoardDLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabBoardDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        tabBoardDLayout.setVerticalGroup(
            tabBoardDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabBoardDLayout.createSequentialGroup()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2))
        );

        tabbedPaneBoard.addTab("BOARD-D", tabBoardD);

        jLabel2.setBackground(new java.awt.Color(255, 255, 204));
        jLabel2.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Unpaid Games");
        jLabel2.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabbedPaneBoard)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabbedPaneBoard))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tabbedPaneBoardPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tabbedPaneBoardPropertyChange
        // TODO add your handling code here:
        System.out.println("property changed");
        System.out.println(tabbedPaneBoard.getSelectedIndex());
        int tabIndex = tabbedPaneBoard.getSelectedIndex();

    }//GEN-LAST:event_tabbedPaneBoardPropertyChange

    private void tabbedPaneBoardComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_tabbedPaneBoardComponentShown
        // TODO add your handling code here:
        System.out.println("cs1");
    }//GEN-LAST:event_tabbedPaneBoardComponentShown

    private void tabbedPaneBoardStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbedPaneBoardStateChanged
        // TODO add your handling code here:
        System.out.println("Hello");
        currentBoard = tabbedPaneBoard.getSelectedIndex();
        System.out.println("Current board: " + currentBoard);
    }//GEN-LAST:event_tabbedPaneBoardStateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        // refresh table
        clearPaymentUIs();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        // make a final payment entry
        if (!(lblGames.getText().contains("..") || lblGames.getText().equals("0") || lblPayStatus.getText().equals("Amount not enough!"))) {

            Game g = new Game();
            double totalAmount = 0;
            double paymentAmount = 0;
            boolean proceedOk = true;

            try {
                if (!lblAmount.getText().equals("") && !lblAmount.getText().contains("..")) {
                    totalAmount = Double.parseDouble(lblAmount.getText());
                }
                if (!payAmount.getText().equals("")) {
                    paymentAmount = Double.parseDouble(payAmount.getText());
                }
                if (!payDiscount.getText().equals("")) {
                    g.setDiscount(Integer.parseInt(payDiscount.getText()));
                }
                if (!paidBy.getText().equals("")) {
                    g.setPayer(paidBy.getText().trim());
                }
                g.setRemark("Completed! " + paidRemark.getText());

            } catch (Exception ex) {
                System.out.println(ex);
                proceedOk = false;
            }

            if (proceedOk) {
                // make a database update for payListA
                if (payListA.size() > 0) {
                    // decrease discount at begining and update totalAmount
                    boolean forDiscount = false;
                    for (int i : payListA) {
                        g.setId(gameListA.get(i).getId());
                        System.out.println(gameListA.get(i).getId());
                        g.setAmount(gameListA.get(i).getAmount());
                        System.out.println(gameListA.get(i).getAmount());

                        if (!forDiscount && g.getDiscount() != 0 && g.getAmount() >= g.getDiscount()) {
                            g.setAmount(g.getAmount() - g.getDiscount());
                            // amount has been deducted for compensatation of Discount
                            forDiscount = true;
                        }
                        System.out.println("Total: " + totalAmount + ", Paying: " + paymentAmount + ", Game Amount Paid: " + g.getAmount() + ", Discount: " + g.getDiscount());

                        // create a single object of Dao
                        if (new GameDao().payForGame(g)) {
                            if (g.getAmount() >= g.getDiscount()) {
                                totalAmount -= (g.getAmount() + g.getDiscount());
                            } else {
                                totalAmount -= g.getAmount();
                            }
                            paymentAmount -= g.getAmount();
                            // not total amount to pay is update
                            if (forDiscount) {
                                g.setDiscount(0);
                            }

                        }
                    }
                    payListA.clear();
                }
            }
        } else {
            System.out.println(" No need to make a payment!");
        }

        clearPaymentUIs();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:

        tablePreparation(jTable1, payListA);
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        // TODO add your handling code here:
         tablePreparation(jTable2, payListB);
    }//GEN-LAST:event_jTable2MouseClicked

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        // board-b pay ment process
        if (!(lblGames1.getText().contains("..") || lblGames1.getText().equals("0") || lblPayStatus1.getText().equals("Amount not enough!"))) {

            Game g = new Game();
            double totalAmount = 0;
            double paymentAmount = 0;
            boolean proceedOk = true;

            try {
                if (!lblAmount1.getText().equals("") && !lblAmount1.getText().contains("..")) {
                    totalAmount = Double.parseDouble(lblAmount1.getText());
                }
                if (!payAmount1.getText().equals("")) {
                    paymentAmount = Double.parseDouble(payAmount1.getText());
                }
                if (!payDiscount1.getText().equals("")) {
                    g.setDiscount(Integer.parseInt(payDiscount1.getText()));
                }
                if (!paidBy1.getText().equals("")) {
                    g.setPayer(paidBy1.getText().trim());
                }
                g.setRemark("Completed! " + paidRemark1.getText());

            } catch (Exception ex) {
                System.out.println(ex);
                proceedOk = false;
            }

            if (proceedOk) {
                // make a database update for payListA
                if (payListB.size() > 0) {
                    // decrease discount at begining and update totalAmount
                    boolean forDiscount = false;
                    for (int i : payListB) {
                        g.setId(gameListB.get(i).getId());
                        System.out.println(gameListB.get(i).getId());
                        g.setAmount(gameListB.get(i).getAmount());
                        System.out.println(gameListB.get(i).getAmount());

                        if (!forDiscount && g.getDiscount() != 0 && g.getAmount() >= g.getDiscount()) {
                            g.setAmount(g.getAmount() - g.getDiscount());
                            // amount has been deducted for compensatation of Discount
                            forDiscount = true;
                        }
                        System.out.println("Total: " + totalAmount + ", Paying: " + paymentAmount + ", Game Amount Paid: " + g.getAmount() + ", Discount: " + g.getDiscount());

                        // create a single object of Dao
                        if (new GameDao().payForGame(g)) {
                            if (g.getAmount() >= g.getDiscount()) {
                                totalAmount -= (g.getAmount() + g.getDiscount());
                            } else {
                                totalAmount -= g.getAmount();
                            }
                            paymentAmount -= g.getAmount();
                            // not total amount to pay is update
                            if (forDiscount) {
                                g.setDiscount(0);
                            }

                        }
                    }
                    payListB.clear();
                }
            }
        } else {
            System.out.println(" No need to make a payment!");
        }

        clearPaymentUIs();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable3MouseClicked
        // TODO add your handling code here:
         tablePreparation(jTable3, payListC);
    }//GEN-LAST:event_jTable3MouseClicked

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        if (!(lblGames2.getText().contains("..") || lblGames2.getText().equals("0") || lblPayStatus2.getText().equals("Amount not enough!"))) {

            Game g = new Game();
            double totalAmount = 0;
            double paymentAmount = 0;
            boolean proceedOk = true;

            try {
                if (!lblAmount2.getText().equals("") && !lblAmount2.getText().contains("..")) {
                    totalAmount = Double.parseDouble(lblAmount2.getText());
                }
                if (!payAmount2.getText().equals("")) {
                    paymentAmount = Double.parseDouble(payAmount2.getText());
                }
                if (!payDiscount2.getText().equals("")) {
                    g.setDiscount(Integer.parseInt(payDiscount2.getText()));
                }
                if (!paidBy2.getText().equals("")) {
                    g.setPayer(paidBy2.getText().trim());
                }
                g.setRemark("Completed! " + paidRemark2.getText());

            } catch (Exception ex) {
                System.out.println(ex);
                proceedOk = false;
            }

            if (proceedOk) {
                // make a database update for payListA
                if (payListC.size() > 0) {
                    // decrease discount at begining and update totalAmount
                    boolean forDiscount = false;
                    for (int i : payListC) {
                        g.setId(gameListC.get(i).getId());
                        System.out.println(gameListC.get(i).getId());
                        g.setAmount(gameListC.get(i).getAmount());
                        System.out.println(gameListC.get(i).getAmount());

                        if (!forDiscount && g.getDiscount() != 0 && g.getAmount() >= g.getDiscount()) {
                            g.setAmount(g.getAmount() - g.getDiscount());
                            // amount has been deducted for compensatation of Discount
                            forDiscount = true;
                        }
                        System.out.println("Total: " + totalAmount + ", Paying: " + paymentAmount + ", Game Amount Paid: " + g.getAmount() + ", Discount: " + g.getDiscount());

                        // create a single object of Dao
                        if (new GameDao().payForGame(g)) {
                            if (g.getAmount() >= g.getDiscount()) {
                                totalAmount -= (g.getAmount() + g.getDiscount());
                            } else {
                                totalAmount -= g.getAmount();
                            }
                            paymentAmount -= g.getAmount();
                            // not total amount to pay is update
                            if (forDiscount) {
                                g.setDiscount(0);
                            }

                        }
                    }
                    payListC.clear();
                }
            }
        } else {
            System.out.println(" No need to make a payment!");
        }

        clearPaymentUIs();
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jTable4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable4MouseClicked
        // TODO add your handling code here:
         tablePreparation(jTable4, payListD);
    }//GEN-LAST:event_jTable4MouseClicked

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here:
        // payment of unpaid gamnes from board-d
        if (!(lblGames3.getText().contains("..") || lblGames3.getText().equals("0") || lblPayStatus3.getText().equals("Amount not enough!"))) {

            Game g = new Game();
            double totalAmount = 0;
            double paymentAmount = 0;
            boolean proceedOk = true;

            try {
                if (!lblAmount3.getText().equals("") && !lblAmount3.getText().contains("..")) {
                    totalAmount = Double.parseDouble(lblAmount3.getText());
                }
                if (!payAmount3.getText().equals("")) {
                    paymentAmount = Double.parseDouble(payAmount3.getText());
                }
                if (!payDiscount3.getText().equals("")) {
                    g.setDiscount(Integer.parseInt(payDiscount3.getText()));
                }
                if (!paidBy3.getText().equals("")) {
                    g.setPayer(paidBy3.getText().trim());
                }
                g.setRemark("Completed! " + paidRemark3.getText());

            } catch (Exception ex) {
                System.out.println(ex);
                proceedOk = false;
            }

            if (proceedOk) {
                // make a database update for payListA
                if (payListD.size() > 0) {
                    // decrease discount at begining and update totalAmount
                    boolean forDiscount = false;
                    for (int i : payListD) {
                        g.setId(gameListD.get(i).getId());
                        System.out.println(gameListD.get(i).getId());
                        g.setAmount(gameListD.get(i).getAmount());
                        System.out.println(gameListD.get(i).getAmount());

                        if (!forDiscount && g.getDiscount() != 0 && g.getAmount() >= g.getDiscount()) {
                            g.setAmount(g.getAmount() - g.getDiscount());
                            // amount has been deducted for compensatation of Discount
                            forDiscount = true;
                        }
                        System.out.println("Total: " + totalAmount + ", Paying: " + paymentAmount + ", Game Amount Paid: " + g.getAmount() + ", Discount: " + g.getDiscount());

                        // create a single object of Dao
                        if (new GameDao().payForGame(g)) {
                            if (g.getAmount() >= g.getDiscount()) {
                                totalAmount -= (g.getAmount() + g.getDiscount());
                            } else {
                                totalAmount -= g.getAmount();
                            }
                            paymentAmount -= g.getAmount();
                            // not total amount to pay is update
                            if (forDiscount) {
                                g.setDiscount(0);
                            }

                        }
                    }
                    payListD.clear();
                }
            }
        } else {
            System.out.println(" No need to make a payment!");
        }

        clearPaymentUIs();
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton14ActionPerformed

    public static Set<Integer> getPayList() {
        switch (currentBoard) {
            case 0:
                return payListA;  // no break statement needed
            case 1:
                return payListB;  // change it to B later
            case 2:
                return payListC;   // change it to C later
            case 3:
                return payListD;   // change it to D later
            default:
                return null;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JLabel lblAmount;
    private javax.swing.JLabel lblAmount1;
    private javax.swing.JLabel lblAmount2;
    private javax.swing.JLabel lblAmount3;
    private javax.swing.JLabel lblGames;
    private javax.swing.JLabel lblGames1;
    private javax.swing.JLabel lblGames2;
    private javax.swing.JLabel lblGames3;
    private javax.swing.JLabel lblPayStatus;
    private javax.swing.JLabel lblPayStatus1;
    private javax.swing.JLabel lblPayStatus2;
    private javax.swing.JLabel lblPayStatus3;
    private javax.swing.JLabel lblTime;
    private javax.swing.JLabel lblTime1;
    private javax.swing.JLabel lblTime2;
    private javax.swing.JLabel lblTime3;
    private javax.swing.JTextField paidBy;
    private javax.swing.JTextField paidBy1;
    private javax.swing.JTextField paidBy2;
    private javax.swing.JTextField paidBy3;
    private javax.swing.JTextField paidRemark;
    private javax.swing.JTextField paidRemark1;
    private javax.swing.JTextField paidRemark2;
    private javax.swing.JTextField paidRemark3;
    private javax.swing.JTextField payAmount;
    private javax.swing.JTextField payAmount1;
    private javax.swing.JTextField payAmount2;
    private javax.swing.JTextField payAmount3;
    private javax.swing.JTextField payDiscount;
    private javax.swing.JTextField payDiscount1;
    private javax.swing.JTextField payDiscount2;
    private javax.swing.JTextField payDiscount3;
    private javax.swing.JPanel tabBoardA;
    private javax.swing.JPanel tabBoardB;
    private javax.swing.JPanel tabBoardC;
    private javax.swing.JPanel tabBoardD;
    private javax.swing.JTabbedPane tabbedPaneBoard;
    // End of variables declaration//GEN-END:variables

    private void displayMatchDetail() {
        int noOfGames = 0;
        int playTime = 0;
        double amount = 0.0;
        switch (currentBoard) {
            case 0:
                for (int i : payListA) {
                    noOfGames++;
                    Game g = gameListA.get(i);
                    amount += g.getAmount();
                    playTime += g.getMatchTime();
                }
        lblGames.setText(Integer.toString(noOfGames));
        lblAmount.setText(Double.toString(amount));
        lblTime.setText(Integer.toString(playTime));
        // prepare for payment if amount has some value..
        payAmount.setText(Double.toString(amount));
        if (!payAmount.getText().equals("")) {
            double paying = Double.parseDouble(payAmount.getText());
            double discount = 0;
            if (!payDiscount.getText().equals("")) {
                discount = Integer.parseInt(payDiscount.getText());
            }
            System.out.println("A: " + amount + ", P: " + paying + ", D: " + discount);
            if ((paying + discount) < amount) {
                lblPayStatus.setText("Amount not enough!");
                lblPayStatus.setForeground(Color.red);
            } else {
                lblPayStatus.setText("Good to pay!");
                lblPayStatus.setForeground(Color.green);
            }
        }
                break;
                case 1:
                for (int i : payListB) {
                    noOfGames++;
                    Game g = gameListB.get(i);
                    amount += g.getAmount();
                    playTime += g.getMatchTime();
                }
        lblGames1.setText(Integer.toString(noOfGames));
        lblAmount1.setText(Double.toString(amount));
        lblTime1.setText(Integer.toString(playTime));
        
        if (!payAmount1.getText().equals("")) {
            double paying = Double.parseDouble(payAmount1.getText());
            double discount = 0;
            if (!payDiscount1.getText().equals("")) {
                discount = Integer.parseInt(payDiscount1.getText());
            }
            System.out.println("A: " + amount + ", P: " + paying + ", D: " + discount);
            if ((paying + discount) < amount) {
                lblPayStatus1.setText("Amount not enough!");
                lblPayStatus1.setForeground(Color.red);
            } else {
                lblPayStatus1.setText("Good to pay!");
                lblPayStatus1.setForeground(Color.green);
            }
        }
        break;
                case 2:
                for (int i : payListC) {
                    noOfGames++;
                    Game g = gameListC.get(i);
                    amount += g.getAmount();
                    playTime += g.getMatchTime();
                }
        
        lblGames2.setText(Integer.toString(noOfGames));
        lblAmount2.setText(Double.toString(amount));
        lblTime2.setText(Integer.toString(playTime));
        
        if (!payAmount2.getText().equals("")) {
            double paying = Double.parseDouble(payAmount2.getText());
            double discount = 0;
            if (!payDiscount2.getText().equals("")) {
                discount = Integer.parseInt(payDiscount.getText());
            }
            System.out.println("A: " + amount + ", P: " + paying + ", D: " + discount);
            if ((paying + discount) < amount) {
                lblPayStatus2.setText("Amount not enough!");
                lblPayStatus2.setForeground(Color.red);
            } else {
                lblPayStatus2.setText("Good to pay!");
                lblPayStatus2.setForeground(Color.green);
            }
        }
                break;
                case 3:
                for (int i : payListC) {
                    noOfGames++;
                    Game g = gameListC.get(i);
                    amount += g.getAmount();
                    playTime += g.getMatchTime();
                }
        lblGames3.setText(Integer.toString(noOfGames));
        lblAmount3.setText(Double.toString(amount));
        lblTime3.setText(Integer.toString(playTime));
        
        if (!payAmount3.getText().equals("")) {
            double paying = Double.parseDouble(payAmount3.getText());
            double discount = 0;
            if (!payDiscount3.getText().equals("")) {
                discount = Integer.parseInt(payDiscount3.getText());
            }
            System.out.println("A: " + amount + ", P: " + paying + ", D: " + discount);
            if ((paying + discount) < amount) {
                lblPayStatus3.setText("Amount not enough!");
                lblPayStatus3.setForeground(Color.red);
            } else {
                lblPayStatus3.setText("Good to pay!");
                lblPayStatus3.setForeground(Color.green);
            }
        }
                break;
            default:
                System.out.println("Display difficulty!");
                break;
        }
       
        
    }

    private void clearPaymentUIs() {
        //Clear paylist
        //remove gameList
        payListA.clear();
        payListB.clear();
        payListC.clear();
        payListD.clear();
        gameListA = null;
        gameListB = null;
        gameListC = null;
        gameListD = null;
        prepareComponents();

        // clear JTable
        switch (currentBoard) {
            case 0:
                lblGames.setText(".......");
                lblAmount.setText("......");
                lblTime.setText("......");
                lblPayStatus.setText("Cleared!");
                payAmount.setText("");
                payDiscount.setText("");
                paidBy.setText("");
                paidRemark.setText("");
                jTable1.setModel(new GameTableModel(gameListA));
                jTable1.revalidate();
                jTable1.repaint();
                break;
                case 1:
                lblGames1.setText(".......");
                lblAmount1.setText("......");
                lblTime1.setText("......");
                lblPayStatus1.setText("Cleared!");
                payAmount1.setText("");
                payDiscount1.setText("");
                paidBy1.setText("");
                paidRemark1.setText("");
                jTable2.setModel(new GameTableModel(gameListB));
                jTable2.revalidate();
                jTable2.repaint();
                break;
                case 2:
                lblGames2.setText(".......");
                lblAmount2.setText("......");
                lblTime2.setText("......");
                lblPayStatus2.setText("Cleared!");
                payAmount2.setText("");
                payDiscount2.setText("");
                paidBy2.setText("");
                paidRemark2.setText("");
                jTable2.setModel(new GameTableModel(gameListC));
                jTable2.revalidate();
                jTable2.repaint();
                break;
                case 3:
                lblGames3.setText(".......");
                lblAmount3.setText("......");
                lblTime3.setText("......");
                lblPayStatus3.setText("Cleared!");
                payAmount3.setText("");
                payDiscount3.setText("");
                paidBy3.setText("");
                paidRemark3.setText("");
                jTable3.setModel(new GameTableModel(gameListD));
                jTable3.revalidate();
                jTable3.repaint();
                break;
            default:
                System.out.println("error");

        }
    }
    
    private void tablePreparation(JTable table, HashSet<Integer> payList){
        int row = table.getSelectedRow();
        int col = table.getSelectedColumn();
        table.setRowSelectionInterval(row, row);
        table.setColumnSelectionInterval(0, 10);
        // How to associate object with row
        Game g = null;
        switch (currentBoard) {
            case 0:
            g = gameListA.get(row);
            break;
            // find game wit row
            case 1:
            g = gameListB.get(row);
            break;
            case 2:
            g = gameListC.get(row);
            break;
            case 3:
            g = gameListD.get(row);
            break;
            default:
            System.out.println("Game not found!");
            g = new Game();
            break;
        }

        if (col == 10 && g.getPaid().equals("0")) {
            if (g.getRemark().contains("Running") ) {
                JOptionPane.showMessageDialog(null, "Match still running!");
                table.setValueAt(Boolean.FALSE, row, col);
            } else {
                boolean value = (boolean) table.getValueAt(row, col);
                System.out.println(value);
                if (!value && payList.contains(row)) {
                    payList.remove(row);
                    // remove when unchecked and set contains row
                } else if (value && !payList.contains(row)) {
                    payList.add(row);
                } else {
                    System.out.println("Doing nothing for " + value);
                }
                System.out.println(payList);
                displayMatchDetail();
            }

        } else {

            Match m = new MatchDao().getMatchById(g.getMatchId());
            String toolTip = "<html><head><title>Info</title></head><body><div style='border:2px solid black; font-size:18px; height:100px;'>" + m.toString() + "</div></body></html>";
            table.setToolTipText(toolTip);

        }
        table.revalidate();
        table.repaint();
    }
}
